#version 430

layout (triangles) in;
layout (triangle_strip, max_vertices = 100) out;

out vec2 frag_textureCoords;
out vec4 frag_color;

in vec2 geo_textureCoords[];

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;
uniform float age;
uniform float timeCreated;



vec2 l;
vec2 ll;


void emit(vec2 v){

	frag_textureCoords = l;
	
	vec2 a = normalize(l - ll);
	vec2 b = normalize(v - l);
	
	vec2 ad = normalize((a + b) / 2) / 10;
	
	gl_Position = projectionMatrix * modelViewMatrix * vec4(l - vec2(0.0,0.5) + ad, 0.0, 1.0);
	
	EmitVertex();

	frag_textureCoords = v;
	gl_Position = projectionMatrix * modelViewMatrix * vec4(v - vec2(0,0.5), 0.0, 1.0);
	
	EmitVertex();

}

vec2 rotate(vec2 v, float a) {
	float s = sin(a);
	float c = cos(a);
	mat2 m = mat2(c, -s, s, c);
	return m * v;
}

vec2 getNextLine(vec2 d, vec2 p){
	float pres = 30;
	vec2 best = normalize(p * -1)/30 + p;
	float bestV = 5;

	for(int i=0; i< pres; i++){
	
		vec2 pos = normalize(rotate(normalize(d), float(i)/7.5 - 2)) / 20 + p;
		float value = (abs(pos.x) - (pos.y -0.5)*2)  - noise(pos * 10 + timeCreated * 709) / 3;
		
		if(pos.y < 0 || pos.y > p.y || value > 0.9){
			continue;
		}
		
		if(value < bestV){
			bestV = value;
			frag_color = vec4(value,0,0,1);
			best = pos;
		}

		
	}
	return best;
}


void main(void)
{
	vec2 last = vec2(0,1);
	frag_color = vec4(1,1,1,1);
	l = vec2(0,1);
	ll = vec2(0,1);
	emit(last);
	
	vec2 v1 = last;
	ll = l;
	l = last;
	last = getNextLine(vec2(0, -1), last);
	emit(last);
	
	
	
	vec2 v2 = v1;
	v1 = last;
	ll = l;
	l = last;
	last = getNextLine(v1 - v2, last);
	emit(last);
	
	int i = 0;
	while(true){
		v2 = v1;
		v1 = last;
		ll = l;
		l = last;
		last = getNextLine(v1 - v2, last);
		emit(last);
		
		if(sqrt(last.x * last.x + last.y * last.y) < 0.3 || i== 80){
			break;
		}
		
		i++;
	}
		
	
	frag_color = vec4(0,1-(0 * 3),0,1);
	emit(vec2(0,0));
	EndPrimitive();
}